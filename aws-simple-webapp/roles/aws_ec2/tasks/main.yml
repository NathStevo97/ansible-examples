---
# tasks file for aws_ec2
- name: Find AMIs published by Red Hat (309956199498) that are Non-beta and x86 architecture
  ec2_ami_info:
    profile: Nathan-Dev
    region: "{{ aws_region }}"
    owners: 309956199498
    filters:
      architecture: x86_64
      name: RHEL-8*HVM-*
  register: amis

- name: Show the AMIs
  debug:
    var: amis

- name: Get the latest AMI from the list provided
  set_fact:
    latest_ami: "{{ amis.images | sort(attribute='creation_date') | last }}"

- name: Create SSH Key
  ec2_key:
    profile: Nathan-Dev
    region: "{{ aws_region }}"
    name: "simple-webapp-key"
  register: ec2_key_result

- name: Save private key
  copy: 
    content: "{{ ec2_key_result.key.private_key }}"
    dest: "./simple-webapp-key.pem"
    mode: 0600
  when: ec2_key_result.changed

- name: Launch Web and DB Server Instances
  amazon.aws.ec2_instance:
    profile: Nathan-Dev
    name: "{{ item }}"
    key_name: "simple-webapp-key"
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    instance_type: "{{ instance_type }}"
    security_group: "{{ my_vpc_sg.group_id }}"
    image_id: "{{ latest_ami.image_id }}"
    region: "{{ aws_region }}"
    state: running
    wait: true
    network:
      assign_public_ip: true
    tags:
      Name: "{{ item }}"
      app: simple-webapp
  with_items: "{{ instance_list }}"
  register: ec2
    
- name: print the results
  debug:
    var: ec2

- name: wait for ssh connection to be available
  wait_for: host={{ item.public_dns_name }} port=22 delay=10 timeout=60 state=started
  with_items: "{{ ec2.results[0].instances }}"

- name: wait for ssh connection to be available
  wait_for: host={{ item.public_dns_name }} port=22 delay=10 timeout=60 state=started
  with_items: "{{ ec2.results[1].instances }}"

- name: Add web-server to in-memory inventory
  add_host: hostname={{ ec2.results[0].instances[0].public_dns_name }} ansible_user=ec2-user private_ip={{ ec2.results[0].instances[0].private_ip_address }} groupname=web_servers

- name: Add db-server to in-memory inventory
  add_host: hostname={{ ec2.results[1].instances[0].public_dns_name }} ansible_user=ec2-user private_ip={{ ec2.results[1].instances[0].private_ip_address }} groupname=db_servers
